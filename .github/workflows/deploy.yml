name: Deploy to Production

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Verify SSH connection
        run: |
          echo "=== Verifying SSH connection ==="
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      - name: Create .env file with secrets
        run: |
          echo "Creating .env file with secrets"
          echo "GOFOOD_COOKIE=${{ secrets.GOFOOD_COOKIE }}" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          echo "OPENROUTER_BASE_URL=${{ secrets.OPENROUTER_BASE_URL }}" >> .env
          echo "OPENROUTER_MODEL=${{ secrets.OPENROUTER_MODEL || 'deepseek/deepseek-chat-v3-0324:free' }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env

      - name: Deploy to VPS
        run: |
          echo "=== Starting deployment ==="
          echo "=== Deployment details ==="
          echo "{"timestamp": "$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")", "target": "${{ secrets.VPS_HOST }}", "user": "${{ secrets.VPS_USER }}", "directory": "/opt/gourmet-guide-api"}"

          # Copy files
          scp -o StrictHostKeyChecking=no -r * .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/gourmet-guide-api

          # Stop existing containers
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "docker compose down || true"

          # Start new containers
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && docker compose up -d"

          # Wait longer for containers to start
          echo "=== Waiting for services to start ==="
          sleep 30

          # Check database container status
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && docker compose ps timescaledb" || {
            echo "=== Database container failed to start ==="
            exit 1
          }

          # Check app container status
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && docker compose ps app" || {
            echo "=== Application container failed to start ==="
            exit 1
          }

          # Wait a bit more for the app to be fully initialized
          echo "=== Waiting for application to be fully initialized ==="
          sleep 10

          # Check application health
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "curl -f http://localhost:8080/v1/health" || {
            echo "=== Application health check failed ==="
            # Get logs to help diagnose the issue
            ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && docker compose logs app"
            exit 1
          }

          echo "=== Deployment successful ==="

      - name: Verify deployment
        run: |
          echo "=== Verifying deployment ==="
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && \
            echo '=== Checking container status ===' && \
            docker-compose ps && \
            echo '=== Checking container logs ===' && \
            docker-compose logs --tail=50 app"

      - name: Cleanup old deployments
        run: |
          echo "=== Cleaning up old deployments ==="
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && \
            echo '=== Removing old build artifacts ===' && \
            rm -rf build dist *.egg-info && \
            echo '=== Cleaning up Docker cache ===' && \
            docker system prune -f --volumes"

      - name: Verify cleanup
        run: |
          echo "=== Verifying cleanup ==="
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /opt/gourmet-guide-api && \
            echo '=== Checking disk usage ===' && \
            df -h && \
            echo '=== Checking Docker images ===' && \
            docker images | head -n 5"
